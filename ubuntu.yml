AWSTemplateFormatVersion: '2010-09-09'
Description: Despliegue app Java sobre instancia EC2 con ubuntu 20.04 usando Tomcat 10
Parameters:
  EC2AMI:
    Description: Imagen del Sistema Operativo Ubuntu 20.04
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id'
    Default: '/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
  KeyName:
    Description: Par clave valor para acceso SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: vockey
  InstanceType:
    Description: Tamaño instancia EC2
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    ConstraintDescription: Tipos de instancia validas
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
          - install_and_enable_cfn_hup
        install_and_enable_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n"
                  - "action=/opt/aws/bin/cfn-init -v"
                  - "--stack "
                  - Ref: AWS::StackName
                  - " --resource EC2Instance"
                  - " --configsets full_install"
                  - " --region "
                  - Ref: AWS::Region
                  - "\n"
                  - "runas=root"
            "/lib/systemd/system/cfn-hup.service":
              content:
                Fn::Join:
                  - ''
                  - - "[Unit]\n"
                    - "Description=cfn-hup daemon\n\n"
                    - "[Service]\n"
                    - "Type=simple\n"
                    - "ExecStart=/opt/aws/bin/cfn-hup\n"
                    - "Restart=always\n\n"
                    - "[Install]\n"
                    - "WantedBy=multi-user.target"
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: SecurityGroup
      KeyName:
        Ref: KeyName
      IamInstanceProfile: 
        "LabInstanceProfile"
      Monitoring: true
      ImageId:
        Ref: EC2AMI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /tmp/userdata.log 2>&1
          # Actualizar todas las apps
          apt update -y
          # Instalar unzip
          apt install unzip
          # Instalación CodeDeploy Agent
          apt install ruby-full -y
          apt install wget -y
          cd /home/ubuntu
          wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto > /tmp/logfile
          service codedeploy-agent start
          # Instalar AWS helper scripts de CloudFormation
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
          ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets full_install --region ${AWS::Region}
          sleep 1


          # -----------------------------------
          # Script de instalación de Tomcat 10
          # -----------------------------------

          # Creación de usuario sin privilegios para correr Tomcat
          # Comprobar si el usuario tomcat existe y crearlo en caso contrario
          id tomcat || useradd -m -d /opt/tomcat -U -s /bin/false tomcat

          # Actualización del sistema
          apt-get update -y
          apt-get upgrade -y

          #Instalación de la versión de java necesaria
          apt-get install openjdk-17-jdk -y

          # Descaragr el archivo de instalación de Tomcat
          cd /tmp
          wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.18/bin/apache-tomcat-10.1.18.tar.gz

          #Extraer el archivo Tomcat
          tar xzvf apache-tomcat-10*tar.gz -C /opt/tomcat --strip-components=1

          # Se le dan permisos al usuario tomcat sobre el archivo descargado y extraido
          chown -R tomcat:tomcat /opt/tomcat/
          chmod -R u+x /opt/tomcat/bin

          # Definimos usuarios que permitan acceso al Manager y al HostManager
          sed -i 's/<\/tomcat-users>/	<role rolename="manager-gui" \/>/' /opt/tomcat/conf/tomcat-users.xml
          echo '    <user username="manager" password="manager_password" roles="manager-gui" />' | tee -a /opt/tomcat/conf/tomcat-users.xml
          echo '    <role rolename="admin-gui" />' | tee -a /opt/tomcat/conf/tomcat-users.xml
          echo '    <user username="admin" password="admin_password" roles="manager-gui,admin-gui" />' | tee -a /opt/tomcat/conf/tomcat-users.xml
          echo '</tomcat-users>' | tee -a /opt/tomcat/conf/tomcat-users.xml

          # Eliminar restricciones de la página Manager comentando la línea Valve
          sed -i 's/<Valve className="org.apache.catalina.valves.RemoteAddrValve"/<!--  <Valve className="org.apache.catalina.valves.RemoteAddrValve"/' /opt/tomcat/webapps/manager/META-INF/context.xml
          sed -i 's/allow="127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1" \/>/allow="127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1" \/> -->/' /opt/tomcat/webapps/manager/META-INF/context.xml

          # Eliminar restricciones de la página HostManager comentando la línea Valve
          sed -i 's/<Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"/<!--  <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"/' /opt/tomcat/webapps/host-manager/META-INF/context.xml
          sed -i 's/allow="127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1" \/>/allow="127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1" \/> -->/' /opt/tomcat/webapps/host-manager/META-INF/context.xml

          # Creamos el fichero tomcat.service
          echo '[Unit]' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Description=Tomcat' | tee -a  /etc/systemd/system/tomcat.service
          echo 'After=network.target' | tee -a  /etc/systemd/system/tomcat.service
          echo '' | tee -a  /etc/systemd/system/tomcat.service
          echo '[Service]' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Type=forking' | tee -a  /etc/systemd/system/tomcat.service
          echo '' | tee -a  /etc/systemd/system/tomcat.service
          echo 'User=tomcat' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Group=tomcat' | tee -a  /etc/systemd/system/tomcat.service
          echo '' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Environment="/usr/lib/jvm/java-1.17.0-openjdk-amd64"' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Environment="JAVA_OPTS=-Djava.security.egd=file:///dev/urandom"' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Environment="CATALINA_BASE=/opt/tomcat"' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Environment="CATALINA_HOME=/opt/tomcat"' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Environment="CATALINA_PID=/opt/tomcat/temp/tomcat.pid"' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"' | tee -a  /etc/systemd/system/tomcat.service
          echo '' | tee -a  /etc/systemd/system/tomcat.service
          echo 'ExecStart=/opt/tomcat/bin/startup.sh' | tee -a  /etc/systemd/system/tomcat.service
          echo 'ExecStop=/opt/tomcat/bin/shutdown.sh' | tee -a  /etc/systemd/system/tomcat.service
          echo '' | tee -a  /etc/systemd/system/tomcat.services

          echo 'RestartSec=10' | tee -a  /etc/systemd/system/tomcat.service
          echo 'Restart=always' | tee -a  /etc/systemd/system/tomcat.service
          echo '' | tee -a  /etc/systemd/system/tomcat.service
          echo '[Install]' | tee -a  /etc/systemd/system/tomcat.service
          echo 'WantedBy=multi-user.target' | tee -a  /etc/systemd/system/tomcat.service

          # Recargar el systemd daemon
          systemctl daemon-reload

          # Arrancar el systemd daemon
          systemctl start tomcat

          # Activa Tomcat para que arranque con el sistema
          systemctl enable tomcat

          # Permite tráfico en el puerto
          ufw allow 8080

          # Descargamos la aplicación java que queremos utilizar
          apt install git

          folder=/home/ubuntu/holamundo
          git clone https://github.com/DavidHormigoRamirez/springholamundo.git $folder

          # Cambiamos a la carpeta en la que se encuentra la aplicación 
          # y le damos permisos de ejecución a gradlew par poder compilarla
          cd /home/ubuntu/holamundo
          chmod +x gradlew

          # Compilamos la aplicación con Gradle para obtener un fichero en formato WAR
          ./gradlew war

          # Movemos la aplicación compilada a la carpeta de despliegue de Tomcat
          cd ./build/libs

          archivo=`ls`

          chmod +x $archivo

          mv $archivo /opt/tomcat/webapps/hola.war

          # Esta tiene que ser la ultima instrucción
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: TomcatServer
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Acesso SSH y web en 8080
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp:
          Ref: SSHLocation
      Tags:
        - Key: Name
          Value: TomcatSecurityGroup
Outputs:
  IpPublico:
    Description: Direccion de la consola de administracion de Tomcat
    Value: !Sub 'http://${EC2Instance.PublicIp}:8080'
    Export:
      Name: IpPublico